#!/bin/python3

import sys

def prime_factors(n):
    factors = []
    divisor = 2

    while divisor <= n:
        if n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        else:
            divisor += 1

    return factors

def checkHighestFactor(n):
  factors = prime_factors(n)
  return factors[-1]

t = int(input().strip())
for a0 in range(t):
    n = int(input().strip())
    print(checkHighestFactor(n))

chat gpt code    
import sys

def prime_factors(n):
    factors = []
    
    # Check for divisibility by 2
    while n % 2 == 0:
        factors.append(2)
        n //= 2

    # Iterate over odd divisors
    divisor = 3
    while divisor * divisor <= n:
        while n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        divisor += 2  # Increment by 2 to check only odd numbers

    # If n is a prime greater than 2
    if n > 1:
        factors.append(n)

    return factors[-1]

t = int(input().strip())
for a0 in range(t):
    n = int(input().strip())
    print(prime_factors(n))



    
import math

def sieve_of_eratosthenes(max_value):
    sieve = [True] * (max_value + 1)
    sieve[0] = sieve[1] = False
    primes = []

    for p in range(2, int(math.sqrt(max_value)) + 1):
        if sieve[p]:
            for i in range(p * p, max_value + 1, p):
                sieve[i] = False

    for p in range(2, max_value + 1):
        if sieve[p]:
            primes.append(p)

    return primes

def highest_prime_factor(n):
    max_prime = -1

    while n % 2 == 0:
        max_prime = 2
        n //= 2

    for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            max_prime = i
            n //= i

    if n > 2:
        max_prime = n

    return max_prime

max_value = 10**5  # Adjust this value based on the maximum input value
primes = sieve_of_eratosthenes(max_value)

t = int(input().strip())
for _ in range(t):
    n = int(input().strip())
    max_prime = highest_prime_factor(n)
    print(max_prime)
